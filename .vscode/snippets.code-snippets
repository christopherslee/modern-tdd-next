{
	// Place your modern-tdd-next workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"New Jest Test": {
		"scope": "javascript,typescript",
		"prefix": "newjest",
		"body": [
			"/**",
			"* @jest-environment jsdom",
			"*/",
		    "",
			"import React from \"react\";",
			"import { cleanup, fireEvent, render, screen } from \"@testing-library/react\";",
			"import ${TM_FILENAME_BASE/\\.test//i} from \"./${TM_FILENAME_BASE/\\.test//i}\";",
			"",
			"afterEach(cleanup);",
			"",
			"test(\"do something\", () => {",
			"  render(<${TM_FILENAME_BASE/\\.test//i} />);",
			"  expect(screen.getByText(\"${TM_FILENAME_BASE/\\.test//i}\")).toBeTruthy();",
			"});"
		],
		"description": "Log output to console"
	},
	"New Jest Storybook Test": {
		"scope": "javascript,typescript",
		"prefix": "newjeststory",
		"body": [
			"/**",
			"* @jest-environment jsdom",
			"*/",
		    "",
			"import React from \"react\";",
			"import { cleanup, fireEvent, render, screen, waitFor } from \"@testing-library/react\";",
			"import { composeStories } from \"@storybook/testing-react\";",
			"import { initialize, mswDecorator } from \"msw-storybook-addon\";",
			"",
			"import * as stories from \"./${TM_FILENAME_BASE/\\.test//i}.stories\"",
			"const { Primary } = composeStories(stories);",
			"",
			"describe(\"${TM_FILENAME_BASE/\\.test//i}\", () => {",
			"  let server;",
			"",
			"  beforeAll(() => (server = initialize()));",
			"  afterAll(() => (server.close()));",
			"  afterEach(cleanup);",
			"",
			"  test(\"renders\", async () => {",
			"    render(<Primary />);",
			"    expect(await screen.findByText(\"${TM_FILENAME_BASE/\\.test//i}\")).toBeTruthy();",
			"  });",
			"});"
		],
		"description": "Log output to console"
	},
	"Functional Component": {
		"prefix": "newreact",
		"body": [
			"const $TM_FILENAME_BASE = () => {",
			"  return <h1>$TM_FILENAME_BASE</h1>",
			"};",
			"",
			"export default $TM_FILENAME_BASE;",
		],
		"description": "Creates scaffold for React Functional Component"
	},
	"Storybook Story": {
		"prefix": "newstory",
		"body": [
			"import React from \"react\"",
			"",
			"import ${TM_FILENAME_BASE/.stories//i} from \"./${TM_FILENAME_BASE/.stories//i}\";",
			"",
			"const config = {",
			"  title: \"${TM_FILENAME_BASE/.stories//i}\",",
			"  component: ${TM_FILENAME_BASE/.stories//i}",
			"};",
			"",
			"export default config;",
			"",
			"const Template = (args) => <${TM_FILENAME_BASE/.stories//i} {...args} />;",
			"",
			"export const Primary = Template.bind({});",
			"Primary.args = {",
			"};"
		],
		"description": "Creates scaffold for Storybook Story"
	},
	"Storybook Story MSW": {
		"prefix": "newstorymsw",
		"body": [
			"import React from \"react\"",
			"import { rest } from \"msw\";",
			"",
			"import ${TM_FILENAME_BASE/.stories//i} from \"./${TM_FILENAME_BASE/.stories//i}\";",
			"",
			"const config = {",
			"  title: \"${TM_FILENAME_BASE/.stories//i}\",",
			"  component: ${TM_FILENAME_BASE/.stories//i}",
			"};",
			"",
			"export default config;",
			"",
			"const Template = (args) => <${TM_FILENAME_BASE/.stories//i} {...args} />;",
			"",
			"export const Primary = Template.bind({});",
			"Primary.args = {",
			"};"
		],
		"description": "Creates scaffold for Storybook Story with MSW"
	},
	"MSW Rest": {
		"prefix": "mswrest",
		"body": [
			"rest.get(",
			"  ${1:\"url\"},",
			"  (req, res, ctx) => {",
			"    return res(",
			"      ctx.json({$0})",
			"    );",
			"  }",
			"),",
		]
	},
	"Jest MSW Render": {
		"prefix": "rendermsw",
		"body": [
			"render(",
      "  mswDecorator(${1:Primary}, {",
      "    args: ${2:{}},",
      "    parameters: ${1}.parameters,",
			"  })",
			");$0"
		]
	}
}